#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Nov 19 08:53:58 2023

@author: simon_alamos
"""

import pandas as pd
import seaborn as sns 
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm


# # This is to figure out what is the path separator symbol in the user operating system
# import os
# filesep = os.sep

# # This is to let the user pick the folder where the raw data is stored without having to type the path
# # I got it from https://stackoverflow.com/questions/9319317/quick-and-easy-file-dialog-in-python
# import tkinter as tk
# from tkinter import filedialog
# root = tk.Tk()
# root.withdraw()


from sklearn.metrics import r2_score

from string import digits

from scipy import stats
import scipy as scipy
from scipy import optimize
from scipy.stats import iqr
from scipy.special import comb


plt.style.use('default')
# Say, "the default sans-serif font is COMIC SANS"
mpl.rcParams['font.sans-serif'] = "Arial"
# Then, "ALWAYS use sans-serif fonts"
mpl.rcParams['font.family'] = "sans-serif"
mpl.rcParams['font.size']= 9


from matplotlib.ticker import (AutoMinorLocator, MultipleLocator)

#%% define functions

def strainCompetition(XODvals,YODvals,Ro,k,timeboxes):
    effectiveXODvals = np.zeros(len(XODvals))
    XbFrac = np.zeros(len(YoVals))
    
    fig, ax = plt.subplots()
    fig.set_size_inches(2, 2)
    for i, Yo in enumerate(YODvals): #loop over the different ODs
        X = np.zeros(len(timeboxes))
        X[0] = XODvals[i]
    
        R = np.zeros(len(timeboxes))
        R[0] = Ro
        
        Y = np.zeros(len(timeboxes))
        Y[0] = Yo
        
        Xb = np.zeros(len(timeboxes))
        Yb = np.zeros(len(timeboxes))
        
        # run the dynamical system simulation
        for idx, t in enumerate(timeboxes[0:-1]):
            idx = idx+1
            dR = -R[idx-1] * k * (X[idx-1]*Y[idx-1])
            R[idx] = R[idx-1] + dR
            
            dX = -R[idx-1]* k * X[idx-1]
            X[idx] = X[idx-1] + dX
        
            dY = -R[idx-1]* k * Y[idx-1]
            Y[idx] = Y[idx-1] + dY
            
            dXb = R[idx-1] * X[idx-1] * k
            Xb[idx] = Xb[idx-1] + dXb
            
            dYb = R[idx-1] * Y[idx-1] * k    
            Yb[idx] = Yb[idx-1] + dYb
            
        XbFrac[i] = Xb[-1]/X[0] 
            
        effectiveXODvals[i] = Xb[-1] # the last timepoint
        
        plt.plot(Xb)
    
    return effectiveXODvals


def RevstrainCompetition(XODvals,YODvals,Ro,k1,k2,timeboxes):
    effectiveXODvals = np.zeros(len(XODvals))
    XbFrac = np.zeros(len(YoVals))
    
    fig, ax = plt.subplots()
    fig.set_size_inches(2, 2)
    for i, Yo in enumerate(YODvals): #loop over the different ODs
        X = np.zeros(len(timeboxes))
        X[0] = XODvals[i]
    
        R = np.zeros(len(timeboxes))
        R[0] = Ro
        
        Y = np.zeros(len(timeboxes))
        Y[0] = Yo
        
        Xb = np.zeros(len(timeboxes))
        Yb = np.zeros(len(timeboxes))
        
        # run the dynamical system simulation
        for idx, t in enumerate(timeboxes[0:-1]):
            idx = idx+1
            dR = -R[idx-1] * k1 * (X[idx-1]*Y[idx-1]) + k2*Xb[idx-1] + k2*Yb[idx-1]
            R[idx] = R[idx-1] + dR
            
            dX = -R[idx-1]* k1 * X[idx-1] + k2*Xb[idx-1]
            X[idx] = X[idx-1] + dX
        
            dY = -R[idx-1]* k1 * Y[idx-1]+ k2*Yb[idx-1]
            Y[idx] = Y[idx-1] + dY
            
            dXb = R[idx-1] * X[idx-1] * k1 - k2*Xb[idx-1]
            Xb[idx] = Xb[idx-1] + dXb
            
            dYb = R[idx-1] * Y[idx-1] * k1 - k2*Yb[idx-1]    
            Yb[idx] = Yb[idx-1] + dYb
            
        XbFrac[i] = Xb[-1]/X[0] 
            
        effectiveXODvals[i] = Xb[-1] # the last timepoint
        
        plt.plot(Xb)
    
    return effectiveXODvals


def fractionNotTransformed(dilutionOD,  alpha): 
    # dilutionOD = the OD of the culture that we're diluting, the one with the nuclear tag
    # NotTransf = our Y values, the fraction of cells that are not transformed (in log scale)
    # alpha = a sclaing factor to go from OD to poisson probability   
    NotTransfP = np.exp(-alpha * dilutionOD) # Poisson probability of zero successes
    return NotTransfP

# #%% irreversible binding does not lead to nonlinearities

# k = 0.05 
# Ro = 0.02
# Xo = 0.1
# Yo = 0.9
# Xbo = 0
# Ybo = 0
# timeboxes = np.arange(1,10000)
# R = np.zeros(len(timeboxes))
# R[0] = Ro
# X = np.zeros(len(timeboxes))
# X[0] = Xo
# Y = np.zeros(len(timeboxes))
# Y[0] = Yo
# Xb = np.zeros(len(timeboxes))
# Yb = np.zeros(len(timeboxes))

# for idx, t in enumerate(timeboxes[0:-1]):
#     idx = idx+1
#     dR = -R[idx-1] * k * (X[idx-1]*Y[idx-1])
#     R[idx] = R[idx-1] + dR
    
#     dX = -R[idx-1]* k * X[idx-1]
#     X[idx] = X[idx-1] + dX

#     dY = -R[idx-1]* k * Y[idx-1]
#     Y[idx] = Y[idx-1] + dY
    
#     dXb = R[idx-1] * X[idx-1] * k
#     Xb[idx] = Xb[idx-1] + dXb
    
#     dYb = R[idx-1] * Y[idx-1] * k    
#     Yb[idx] = Yb[idx-1] + dYb

# fig, ax = plt.subplots()
# fig.set_size_inches(2, 2)    
# plt.plot(timeboxes,X,'r-')
# plt.plot(timeboxes,Xb,'r--')
# plt.plot(timeboxes,Y,'g-')
# plt.plot(timeboxes,Yb,'g--')

# print(Xb[-1]/X[0])
# print(Yb[-1]/Y[0])

# #%% but what I care about is whether  steady state Xb changes *nonlinearly* with Y
# k = 0.5 
# Ro = 0.2
# Xo = 0.5
# Xbo = 0
# Ybo = 0
# timeboxes = np.arange(1,100000)
# ODtots = np.array([0.05, 0.1, 0.25, 0.5, 1 ,1.5, 2])
# ODtots = np.logspace(-3,np.log10(2),40)
# YoVals = ODtots - Xo #np.logspace(-3,1,30)
# XbFrac = np.zeros(len(YoVals))

# for i, Yo in enumerate(YoVals):
#     R = np.zeros(len(timeboxes))
#     R[0] = Ro
#     X = np.zeros(len(timeboxes))
#     X[0] = Xo
#     Y = np.zeros(len(timeboxes))
#     Y[0] = Yo
#     Xb = np.zeros(len(timeboxes))
#     Yb = np.zeros(len(timeboxes))
    
#     for idx, t in enumerate(timeboxes[0:-1]):
#         idx = idx+1
#         dR = -R[idx-1] * k * (X[idx-1]*Y[idx-1])
#         R[idx] = R[idx-1] + dR
        
#         dX = -R[idx-1]* k * X[idx-1]
#         X[idx] = X[idx-1] + dX
    
#         dY = -R[idx-1]* k * Y[idx-1]
#         Y[idx] = Y[idx-1] + dY
        
#         dXb = R[idx-1] * X[idx-1] * k
#         Xb[idx] = Xb[idx-1] + dXb
        
#         dYb = R[idx-1] * Y[idx-1] * k    
#         Yb[idx] = Yb[idx-1] + dYb
    
#     # fig, ax = plt.subplots()
#     # fig.set_size_inches(2, 2)    
#     # plt.plot(timeboxes,X,'r-')
#     # plt.plot(timeboxes,Xb,'r--')
#     # plt.plot(timeboxes,Y,'g-')
#     # plt.plot(timeboxes,Yb,'g--')
#     XbFrac[i] = Xb[-1]

# # fig, ax = plt.subplots()
# # fig.set_size_inches(2, 2)
# # plt.plot(ODtots,XbFrac,'-')
# # Change major ticks to show every 20.
# # ax.xaxis.set_major_locator(MultipleLocator(20))
# # ax.yaxis.set_major_locator(MultipleLocator(0.1))

# # # Change minor ticks to show every 5. (20/4 = 5)
# # ax.xaxis.set_minor_locator(AutoMinorLocator(0.01))
# # ax.yaxis.set_minor_locator(AutoMinorLocator(2))

# # # Turn grid on for both major and minor ticks and style minor slightly
# # # differently.
# # ax.grid(which='major', color='#CCCCCC', linestyle='-')
# # ax.grid(which='minor', color='#CCCCCC', linestyle='-')
# plt.xlabel('total OD')
# plt.ylabel('effective OD of labeled strain')
# plt.title('k = ' + str(k))


#%% a more reasonable loop of the same

XoVals = np.array([0.001,0.002,0.005,0.01,0.02, 0.05, 0.1, 0.25, 0.5, 1, 2])
#XoVals = np.logspace(np.log10(0.001),np.log10(2),10)
k1 = 0.5 #rate for going from X to Xb
k2 = 0 #rate for going from Xb to X # 0.000001
Ro = 0.45 #initial resources
timeboxes = np.arange(1,30000)
#ODtots = np.logspace(np.log10(Xo),np.log10(2),10)
ODtots = np.array([0.05,0.1,0.5,1,2])

# fig, ax = plt.subplots()
# fig.set_size_inches(2, 2)

#to store 'effective X' across X dilutions (columns), across all OD tots (rows)
XbValues = np.zeros([len(ODtots),len(XoVals)])

# initialize list of lists 
data = [[3, 2], [3, 1], [3, 0.5],[3, 0.1],[3, 0.05],[3, 0.02],[3, 0.01],[3, 0.005],[3, 0.002],[3, 0.001],[2, 2], [2, 1], [2, 0.5],[2, 0.1],[2, 0.05],[2, 0.02],[2, 0.01],[2, 0.005],[2, 0.002],[2, 0.001],
        [1, 1], [1, 0.5],[1, 0.1],[1, 0.05],[1, 0.02],[1, 0.01],[1, 0.005],[1, 0.002],[1, 0.001],
        [0.5, 0.5],[0.5, 0.1],[0.5, 0.05],[0.5, 0.02],[0.5, 0.01],[0.5, 0.005],[0.5, 0.002],[0.5, 0.001],
        [0.1, 0.1],[0.1, 0.05],[0.1, 0.02],[0.1, 0.01],[0.1, 0.005],[0.1, 0.002],[0.1, 0.001],
        [0.05, 0.05],[0.05, 0.02],[0.05, 0.01],[0.05, 0.005],[0.05, 0.001]] 
# Create the pandas DataFrame 
df = pd.DataFrame(data, columns=['ODtot', 'ODdil']) 
df['ODeff'] = np.nan

for i, ODtot in enumerate(ODtots):
    XoVals2 = XoVals[XoVals<=ODtot]
    for j, Xo in enumerate(XoVals2):
        Yo = ODtot-Xo
        # now run the simulation
        # create vectors to store values over time
        R = np.zeros(len(timeboxes))
        X = np.zeros(len(timeboxes))
        Y = np.zeros(len(timeboxes))
        Xb = np.zeros(len(timeboxes))
        Yb = np.zeros(len(timeboxes))
        # initialize the arrays with the initial values
        R[0] = Ro
        X[0] = Xo
        Y[0] = Yo   
        Xbo = 0
        Ybo = 0
        # run the actual simulation
        # the result we want is the number (OD) of Xb at the end
        for idx, t in enumerate(timeboxes[0:-1]):
            idx = idx+1
            dR = -R[idx-1]*k1*X[idx-1] - R[idx-1]*k1*Y[idx-1] + k2*Xb[idx-1] + k2*Yb[idx-1]
            R[idx] = R[idx-1] + dR
            #print(dR)
            
            dX = -R[idx-1]*k1*X[idx-1] + k2*Xb[idx-1]
            X[idx] = X[idx-1] + dX
            
            dY = -R[idx-1]*k1*Y[idx-1]+ k2*Yb[idx-1]
            Y[idx] = Y[idx-1] + dY
            
            dXb = R[idx-1]*X[idx-1]*k1 - k2*Xb[idx-1]
            Xb[idx] = Xb[idx-1] + dXb
            
            dYb = R[idx-1]*Y[idx-1]*k1 - k2*Yb[idx-1]    
            Yb[idx] = Yb[idx-1] + dYb
            
        df.loc[(df['ODtot']==ODtot) & (df['ODdil']==Xo),'ODeff'] = Xb[-1]



myPalette2 = cm.viridis(np.linspace(0, 1, len(ODtots)))
fig, ax = plt.subplots()
fig.set_size_inches(2, 2)
for idx, ODtot in enumerate(ODtots):
    thisColor = myPalette2[idx]
    datadf = df[df['ODtot']==ODtot]
    dilutionOD = datadf['ODdil']
    effectiveOD = datadf['ODeff']
    plt.plot(dilutionOD,effectiveOD,'-o',mfc =thisColor, color=thisColor,alpha=1,lw=2)
plt.xscale('log')
plt.yscale('log')
plt.legend(ODtots, title='total OD',bbox_to_anchor =(1, 1.04))
plt.xlabel('dilution OD')
plt.ylabel('effectiveOD (bound cells)')
plt.title('resource competition model')
plt.show()


myPalette2 = cm.viridis(np.linspace(0, 1, len(ODtots)))
fig, ax = plt.subplots()
fig.set_size_inches(3, 2)
alpha = 50
for idx, ODtot in enumerate(ODtots):
    datadf = df[df['ODtot']==ODtot]
    dilutionOD = datadf['ODdil']
    effectiveOD = datadf['ODeff']
    pNot = fractionNotTransformed(effectiveOD,  alpha)
    plt.plot(dilutionOD,pNot,'-o',mfc = 'w', color=myPalette2[idx],alpha=1,lw=2)
plt.xscale('log')
plt.legend(ODtots, title='total OD',bbox_to_anchor =(1.35, 1.04))
plt.xlabel('dilution OD')
plt.ylabel('fraction of cells not transformed')
plt.title('resource competition model')
plt.show()


            
m = -0.8734228752402693 #this is for GFP
scalingFactor = np.exp(m*ODtot)
df['scalingFactor']  = np.exp(m*df['ODtot'])
df['scaledODdil'] = df['ODdil'] * df['scalingFactor']
myPalette2 = cm.viridis(np.linspace(0, 1, len(ODtots)))
fig, ax = plt.subplots()
fig.set_size_inches(2, 2)
for idx, ODtot in enumerate(ODtots):
    thisColor = myPalette2[idx]
    datadf = df[df['ODtot']==ODtot]
    scaledOD = datadf['scaledODdil']
    effectiveOD = datadf['ODeff']
    plt.plot(scaledOD,effectiveOD,'-o',mfc =thisColor, color=thisColor,alpha=1,lw=2)
plt.xscale('log')
plt.yscale('log')
plt.legend(ODtots, title='total OD',bbox_to_anchor =(1, 1.04))
plt.xlabel('dilution OD')
plt.ylabel('rescaled OD \n based on alpha as a functon of ODtot')
plt.title('resource competition model')
plt.show()


fig, ax = plt.subplots()
fig.set_size_inches(3, 2)
alpha = 50
for idx, ODtot in enumerate(ODtots):
    datadf = df[df['ODtot']==ODtot]
    dilutionOD = datadf['ODdil']
    effectiveOD = datadf['ODeff']
    pNot = fractionNotTransformed(effectiveOD,  alpha)
    plt.plot(effectiveOD,pNot,'-o',mfc = 'w',color=myPalette2[idx],alpha=1,lw=2)
plt.xscale('log')
plt.legend(ODtots, title='total OD',bbox_to_anchor =(1.35, 1.04))
plt.xlabel('effective dilution OD \n i.e. OD of bound cells (same alpha)')
plt.ylabel('fraction of cells not transformed')
plt.title('resource competition model')
plt.show()



#%% plot model and data

#load the data
fractionTransformable = 0.55 # fraction of all nuclei that can get transformed
ODdata1 = pd.read_csv('/Users/simon_alamos/Documents/Shih_lab/Data/Microscopy/RawData/8-28-23/AllData3.csv')
ODdata2 = pd.read_csv('/Users/simon_alamos/Documents/Shih_lab/Data/Microscopy/RawData/9-19-23/AllData3.csv')
ODdata3 = pd.read_csv('/Users/simon_alamos/Documents/Shih_lab/Data/Microscopy/RawData/10-23-23/AllData3.csv')
ODdata3 = ODdata3[ODdata3['plant'].str.contains('OD005')]
ODdata = pd.concat([ODdata1,ODdata2,ODdata3]) # combine them
ODdata['fracGFP'] = ODdata['NGFP']/(ODdata['NBFP']*fractionTransformable)
ODdata['fracGFP'].loc[ODdata['fracGFP']>1]=1
ODdata['fracRFP'] = ODdata['NRFP']/(ODdata['NBFP']*fractionTransformable)
ODdata['fracRFP'].loc[ODdata['fracRFP']>1]=1
ODdata['ODoneStrain'] = ODdata['OD']/2 # ****  IMPORTANT!  ***** the OD in the dataframe is the mix of green and red strains


ODtots = [0.05, 0.1, 0.5, 2]
myPalette3 = cm.viridis(np.linspace(0, 1, len(ODtots)))
fig, ax = plt.subplots()
fig.set_size_inches(3, 2)
for idx, ODtot in enumerate(ODtots):
    ThisODdata = ODdata[ODdata['ODtot']==ODtot]  
    #remove the ODtot = 0.2 that I had included in the ODtot=0.1 experiment
    if ODtot == 0.1:
        ThisODdata = ThisODdata[ThisODdata.OD != 0.5]   
    #remove the ODtot = 1 that I had included in the ODtot=0.5 experiment
    if ODtot == 0.5:
        ThisODdata = ThisODdata[ThisODdata.OD != 2]
        
    ThisODdata['fracNotGFP'] = 1 - ThisODdata['fracGFP']
    # calculate the means for plotting
    MeanPerOD = ThisODdata.groupby(by=["ODoneStrain"]).mean()
    SDPerOD = ThisODdata.groupby(by=["ODoneStrain"]).sem()
    NotGFPMeanPerOD = MeanPerOD['fracNotGFP']
    NotGFPSDPerOD = SDPerOD['fracNotGFP']
    ODvals = MeanPerOD.index

    #sns.scatterplot(data=ThisODdata, x="OD", y="fracNotGFP",marker='o',color=palette[idx],alpha = 0.4,s=55)
    plt.errorbar(ODvals,NotGFPMeanPerOD,NotGFPSDPerOD, fmt="o", color='k', mfc=myPalette3[idx],mec='k', ms=5, capsize= None)
    
    datadf = df[df['ODtot']==ODtot]
    dilutionOD = datadf['ODdil']
    effectiveOD = datadf['ODeff']
    pNot = fractionNotTransformed(effectiveOD,  alpha)
    plt.plot(dilutionOD,pNot,'--', color=myPalette3[idx],alpha=1,lw=2)
    
plt.xscale('log')
plt.xlabel('labeled strain dilution OD')
plt.ylabel('fraction of cells not transformed')
plt.title('resource competition model vs data')
plt.legend(ODtots, title='total OD',bbox_to_anchor =(1.35, 1.04))
plt.show()



#%%
Nstrains = 13
ODtot = 0.5
ODdil = ODtot/Nstrains
alpha = 50
M = -0.87

def pAtLeastOnece(ODtot, ODdil, alpha, M):
    ODeff = ODdil * np.exp(M*ODtot)
    gamma = alpha * ODeff
    p = 1 - np.exp(-gamma)
    return p

def PallNStrains(ODtot, ODdil, alpha, M,N):
    pAllN = np.power(pAtLeastOnece(ODtot, ODdil, alpha, M),N)
    return pAllN


ODtots = [0.05, 0.1, 0.5, 1, 2]
#ODtots = np.logspace(-2,np.log10(2))
Numstrains = np.arange(14)+1
probMatrix = np.zeros([len(Numstrains),len(ODtots)])
for i, N in enumerate(Numstrains):
    for j, ODtot in enumerate(ODtots):
        ODdil = ODtot/N
        PallStrains = PallNStrains(ODtot, ODdil, alpha, M, N)
        probMatrix[i,j] = PallStrains


fig, ax = plt.subplots()
fig.set_size_inches(2, 2)        
plt.plot(probMatrix,'-o',ms=4)
plt.legend(ODtots, title='total OD',bbox_to_anchor =(1, 1.04))
plt.xlabel('number of strains')
plt.ylabel('probability of cells \n transformed by all strains')
plt.yscale('log')


fig, ax = plt.subplots()
fig.set_size_inches(2.5, 2)        
plt.plot(ODtots,probMatrix[-1,:],'-')
#plt.legend(ODtots, title='total OD',bbox_to_anchor =(1, 1.04))
plt.xlabel('total OD')
plt.xscale('log')
plt.yscale('log')
plt.ylabel('probability of cells \n transformed by 14 strains')


fig, ax = plt.subplots()
fig.set_size_inches(2.5, 2)
for idx, N in enumerate(Numstrains):   
    plt.plot(ODtots,probMatrix[idx,:],'-')
#plt.legend(ODtots, title='total OD',bbox_to_anchor =(1, 1.04))
plt.xlabel('total OD')
plt.xscale('log')
# plt.yscale('log')
plt.legend(Numstrains, title='number of strains',bbox_to_anchor =(1, 1.04))
plt.ylabel('probability of cells \n transformed by N strains')


# #%% reversible binding does not lead to nonlinearities either

# k1 = 0.05 
# k2 = 0.001
# Ro = 0.00001
# Xo = 0.01
# Yo = 0.99
# Xbo = 0
# Ybo = 0
# timeboxes = np.arange(1,100000)
# R = np.zeros(len(timeboxes))
# R[0] = Ro
# X = np.zeros(len(timeboxes))
# X[0] = Xo
# Y = np.zeros(len(timeboxes))
# Y[0] = Yo
# Xb = np.zeros(len(timeboxes))
# Yb = np.zeros(len(timeboxes))

# for idx, t in enumerate(timeboxes[0:-1]):
#     idx = idx+1
#     dR = -R[idx-1] * k1 * (X[idx-1]*Y[idx-1]) + k2*Xb[idx-1] + k2*Yb[idx-1]
#     R[idx] = R[idx-1] + dR
    
#     dX = -R[idx-1]* k1 * X[idx-1] + k2*Xb[idx-1]
#     X[idx] = X[idx-1] + dX

#     dY = -R[idx-1]* k1 * Y[idx-1]+ k2*Yb[idx-1]
#     Y[idx] = Y[idx-1] + dY
    
#     dXb = R[idx-1] * X[idx-1] * k1 - k2*Xb[idx-1]
#     Xb[idx] = Xb[idx-1] + dXb
    
#     dYb = R[idx-1] * Y[idx-1] * k1 - k2*Yb[idx-1]    
#     Yb[idx] = Yb[idx-1] + dYb

# fig, ax = plt.subplots()
# fig.set_size_inches(2, 2)    
# plt.plot(timeboxes,X,'r-')
# plt.plot(timeboxes,Xb,'r--')
# plt.plot(timeboxes,Y,'g-')
# plt.plot(timeboxes,Yb,'g--')

# print(Xb[-1]/X[0])
# print(Yb[-1]/Y[0])















































